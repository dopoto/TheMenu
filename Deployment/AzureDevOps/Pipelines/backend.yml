# This is a Build Deploy Pipeline for .NET 6 Web App to Azure App Service using Azure DevOps Pipeline

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: PROD
- name: buildConfiguration
  value: 'Release'
- name: dotNetFramework
  value: 'net6.0'
- name: dotNetVersion
  value: '6.0.x'
- name: targetRuntime
  value: 'linux-x64'
- name: azureSPNName
  value: 'azure-service-connection' # AzureDevOps portal > [Your Project] > Settings | Initially defined in Azure Portal > App Registrations. See https://subhankarsarkar.com/dot-net6-azure-web-app-deployment-using-azure-devops-pipeline/
#  azureAppServiceName: 'the-menu-backend-02' #get it from your Azure portal



steps:

# ERROR: "Build failed. Use dotnet build to see the errors"
# - task: CmdLine@2
#   displayName: 'Execute EF Migrations'
#   inputs:
#     script: |
#       nuget locals http-cache -clear
#       dotnet new tool-manifest
#       dotnet tool install --global dotnet-ef --version 6.0.0-preview.7.21378.4
#       dotnet tool update --global dotnet-ef --version 6.0.0-preview.7.21378.4
#       dotnet tool restore --interactive
#       dotnet ef migrations script --output db.sql --project BackEnd --context TheMenuBackEndContext --connectionString '$(ConnectionStrings.TheMenuBackEndContextConnection)'  --idempotent

# - task: CmdLine@2
#   displayName: 'Execute EF Migrations 2'
#   inputs:
#     script: |
#       nuget locals http-cache -clear
#       dotnet new tool-manifest
#       dotnet tool install --global dotnet-ef --version 6.0.0-preview.7.21378.4
#       dotnet tool update --global dotnet-ef --version 6.0.0-preview.7.21378.4
#       dotnet tool restore --interactive
#       dotnet ef migrations script --no-build --output db.sql --project BackEnd --context TheMenuBackEndContext --connectionString '$(ConnectionStrings.TheMenuBackEndContextConnection)'  --idempotent

# - task: UseDotNet@2
#   displayName: New Manifest for tooling
#   inputs:
#     version: $(dotNetVersion)
#     includePreviewVersions: true
# - script: dotnet new tool-manifest

# - task: UseDotNet@2
#   displayName: Install dotnet-ef
#   inputs:
#     version: $(dotNetVersion)
#     includePreviewVersions: true
# - script: dotnet tool install --global dotnet-ef --version 6.0.0-preview.7.21378.4
# TODO Remove version above

# - task: CmdLine@2
#   displayName: EFinstall cmd
#   inputs:
#     script: |
#       dotnet tool uninstall --global dotnet-ef
#       dotnet tool install --global dotnet-ef --version 6.0.0-preview.7.21378.4

# - task: UseDotNet@2
#   displayName: dotnet tool restore
#   inputs:
#     version: $(dotNetVersion)
#     includePreviewVersions: true
# - script: dotnet tool restore

# - task: DotNetCoreCLI@2
#   displayName: Install dotnet-ef
#   inputs:
#     command: 'custom'
#     custom: 'tool'
#     arguments: 'install --global dotnet-ef'

- task: PowerShell@2
  displayName: 'Update AppSettings file with secrets'
  inputs:
    targetType: 'inline'
    script: |
      $pathToJson = "BackEnd/appsettings.json"
      $a = Get-Content $pathToJson | ConvertFrom-Json
      $a.GoogleSignInClientId = '$(GoogleSignInClientId)'
      $a.GoogleSignInClientSecret =  '$(GoogleSignInClientSecret)'
      $a | ConvertTo-Json | set-content $pathToJson

- task: UseDotNet@2
  displayName: 'Build .NET 6 Application'
  inputs:
    version: $(dotNetVersion)
    includePreviewVersions: true
- script: dotnet build --configuration $(buildConfiguration)

# TODO test:
# ERROR Unrecognized option '--connectionString'
# - task: Bash@3
#   displayName: 'Bash3'
#   inputs:
#     targetType: 'inline'
#     script: |
#       cd ..
#       dotnet tool install -g dotnet-ef
#       export PATH="$PATH:$HOME/.dotnet/tools/"
#       cd $(build.sourcesdirectory)
#       dotnet ef migrations script --output db.sql --project BackEnd --context TheMenuBackEndContext  --connectionString '$(ConnectionStrings.TheMenuBackEndContextConnection)' --idempotent
      
#dotnet ef migrations script --idempotent --no-build --configuration $(buildConfiguration) -p BackEnd -o $(build.artifactstagingdirectory)/migrations.sql

# - task: CmdLine@2
#   displayName: EF Migration Bundle cmdline
#   inputs:
#     script: |
#       dotnet ef migrations bundle
#     workingDirectory: '$(System.DefaultWorkingDirectory)/BackEnd'

# - task: UseDotNet@2
#   displayName: EF Migration Bundle
#   inputs:
#     version: $(dotNetVersion)
#     includePreviewVersions: true
# - script: ./BackEnd/dotnet ef migrations bundle


# - task: UseDotNet@2
#   displayName: Generate EF migrations script
#   inputs:
#     version: $(dotNetVersion)
#     includePreviewVersions: true
# - script: dotnet ef migrations script --output db.sql --project BackEnd --context TheMenuBackEndContext --connectionString '$(ConnectionStrings.TheMenuBackEndContextConnection)'  --idempotent

- task: DotNetCoreCLI@2
  displayName: 'Publish app as .NET 6 self-contained application for Linux runtime'
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --framework $(dotNetFramework) --runtime $(targetRuntime) --self-contained --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: PublishPipelineArtifact@1
  displayName: 'Package the file and upload it as artifact of the build'    
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'TheMenuBackend'


# - task: DotNetCoreCLI@2
#   displayName: Restore
#   inputs:
#     command: restore
#     projects: $(BuildParameters.RestoreBuildProjects)
# - task: DotNetCoreCLI@2
#   displayName: Build
#   inputs:
#     projects: $(BuildParameters.RestoreBuildProjects)
#     arguments: --configuration $(BuildConfiguration)

# - task: DotNetCoreCLI@2
#   displayName: Publish
#   inputs:
#     command: publish
#     publishWebProjects: True
#     projects: $(BuildParameters.RestoreBuildProjects)
#     arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
#     zipAfterPublish: True
# - task: PublishBuildArtifacts@1
#   displayName: Publish Artifact
#   condition: succeededOrFailed()
#   inputs:
#     PathtoPublish: $(build.artifactstagingdirectory)
#     TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: SQLScripts'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/db.sql
    ArtifactName: SQLScripts

##
## NOT IN USE - USING Release instead. See Releases\Release Backend to Prod Pipeline
##
# #Publish it to the Azure App Service
# - task: AzureWebApp@1
#   inputs:
#     appType: webAppLinux
#     azureSubscription: $(azureSPNName) #this is the name of the SPN
#     appName: $(azureAppServiceName) #App Service's unique name
#     package: $(Build.ArtifactStagingDirectory)/**/*.zip
